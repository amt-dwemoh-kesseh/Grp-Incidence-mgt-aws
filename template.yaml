AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Incident Reporting App - Auth & Authorization Infrastructure

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.12
    Handler: app.lambda_handler
  Api:
    Auth:
      DefaultAuthorizer: CognitoAuth
      Authorizers:
        CognitoAuth:
          UserPoolArn: !GetAtt UserPool.Arn
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'http://localhost:4200,https://dev.d2zgxshg38rb8v.amplifyapp.com'"

Resources:

################################################## Cognito ####################################################

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: IncidentReportingUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        CustomMessage: !GetAtt CustomMessageFunction.Arn
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: region
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: country
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: city
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: telephone
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: IncidentReportingFrontendClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: IncidentReportingIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Cognito Groups
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref UserPool
      Precedence: 1

  CityOfficialGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: CityOfficial
      UserPoolId: !Ref UserPool
      Precedence: 2

  IdentityPoolAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IncidentReportingAuthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole 
 
  IdentityPoolUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IncidentReportingUnauthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: unauthenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt IdentityPoolAuthRole.Arn
        unauthenticated: !GetAtt IdentityPoolUnauthRole.Arn


################################################## APIs & Functions ##########################################


  AdminInviteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AdminInviteUserFunction
      Description: Allows Admins to invite new Admins or City Officials
      CodeUri: src/admin_invite/
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Layers:
        - !Ref AuthUtilsLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /invite
            Method: POST
            Auth:
              Authorizer: CognitoAuth
        OptionsEvent:
          Type: Api
          Properties:
            Path: /invite
            Method: OPTIONS
            Auth:
              Authorizer: NONE


  CustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoCustomMessageFunction
      Description: Customizes Cognito emails for invites and password resets
      CodeUri: src/custom_message/
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"


  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListUserStatsFunction
      Description: Lists user counts by group and returns all users
      CodeUri: src/list_users/
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Layers:
        - !Ref AuthUtilsLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:AdminListGroupsForUser
              Resource: !GetAtt UserPool.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users
            Method: GET
            Auth:
              Authorizer: CognitoAuth
        OptionsEvent:
          Type: Api
          Properties:
            Path: /users
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  
  AuthUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: IncidentReportingAuthUtils
      Description: Shared authorization utilities for admin-only Lambdas
      ContentUri: src/layers/auth_utils/
      CompatibleRuntimes:
        - python3.12


  CustomMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CustomMessageFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn



 ################################ SSM Parameters ################################

  BaseUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /incident-reporting/baseUrl
      Type: String
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Description: API Gateway Base URL

  IdentityPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /incident-reporting/identityPoolId
      Type: String
      Value: !Ref IdentityPool
      Description: Cognito Identity Pool ID

  UserPoolIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /incident-reporting/userPoolId
      Type: String
      Value: !Ref UserPool
      Description: Cognito User Pool ID

  UserPoolClientIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /incident-reporting/userClientPoolId
      Type: String
      Value: !Ref UserPoolClient
      Description: Cognito User Pool Client ID

  IncidentsUrlDevParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /incident-reporting/incidentsUrlDev
      Type: String
      Value: "https://dev.d14lp2ufkilvts.amplifyapp.com/"
      Description: Amplify Dev Frontend URL

  IncidentsUrlMainParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /incident-reporting/incidentsUrlMain
      Type: String
      Value: "https://main.d14lp2ufkilvts.amplifyapp.com/"
      Description: Amplify Main Frontend URL

 

################################################## Cognito Backup & Restore #####################################
  CognitoBackupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub cognito-user-backups-${AWS::AccountId}-${AWS::Region}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "username"
          KeyType: "HASH"
      SSESpecification:
        SSEEnabled: true


  CognitoBackupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoBackupFunction
      Description: Exports Cognito users daily to DynamoDB
      CodeUri: src/backup/
      Timeout: 900
      MemorySize: 256
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          BACKUP_TABLE: !Ref CognitoBackupTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:BatchWriteItem
              Resource: !GetAtt CognitoBackupTable.Arn


  BackupSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt CognitoBackupFunction.Arn
          Id: BackupTarget

  BackupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoBackupFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BackupSchedule.Arn

  CognitoRestoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoRestoreFunction
      Description: Restores Cognito users from DynamoDB backup
      CodeUri: src/restore/
      Timeout: 900
      MemorySize: 256
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          BACKUP_TABLE: !Ref CognitoBackupTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:GetItem
              Resource: !GetAtt CognitoBackupTable.Arn



################################################## Cognito Health Check #####################################
  CognitoHealthAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Cognito User Pool Health Alerts"
      TopicName: !Sub "${AWS::StackName}-cognito-health-alerts"

  CognitoHealthAlertSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref CognitoHealthAlertTopic
      Protocol: email
      Endpoint: "ehanson787@gmail.com" 

  CognitoHealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoHealthCheckFunction
      Description: Scheduled health check for Cognito User Pool
      CodeUri: src/health_check/   
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          ALERT_TOPIC_ARN: !Ref CognitoHealthAlertTopic
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:DescribeUserPool
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref CognitoHealthAlertTopic

  CognitoHealthCheckSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(30 minutes)   
      State: ENABLED
      Targets:
        - Arn: !GetAtt CognitoHealthCheckFunction.Arn
          Id: "CognitoHealthCheckTarget"

  CognitoHealthCheckPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CognitoHealthCheckFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CognitoHealthCheckSchedule.Arn



Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool

  ApiGatewayUrl:
    Description: Base URL for API Gateway
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  BaseUrlSSMParameter:
    Description: SSM Parameter ARN for API Base URL
    Value: !Ref BaseUrlParameter

  IdentityPoolIdSSMParameter:
    Description: SSM Parameter ARN for Identity Pool ID
    Value: !Ref IdentityPoolIdParameter

  UserPoolIdSSMParameter:
    Description: SSM Parameter ARN for User Pool ID
    Value: !Ref UserPoolIdParameter

  UserPoolClientIdSSMParameter:
    Description: SSM Parameter ARN for User Pool Client ID
    Value: !Ref UserPoolClientIdParameter

  IncidentsUrlDevSSMParameter:
    Description: SSM Parameter ARN for Amplify Dev URL
    Value: !Ref IncidentsUrlDevParameter

  IncidentsUrlMainSSMParameter:
    Description: SSM Parameter ARN for Amplify Main URL
    Value: !Ref IncidentsUrlMainParameter
    