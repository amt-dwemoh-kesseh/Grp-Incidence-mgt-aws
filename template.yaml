AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Incident Reporting App - Auth & Authorization Infrastructure

Parameters:
  ProjectTag: { Type: String, Default: "incident-app" }
  GitRepoUrl:
    { Type: String, Default: https://github.com/drex7/cmrp-frontend.git }
  GitHubTokenSecret: { Type: String, Default: cmrp-frontend/token }
  Env: { Type: String, Default: dev }
  PythonRuntime: { Type: String, Default: python3.12 }
  NodeRuntime: { Type: String, Default: nodejs22.x }
  ApiStage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: "API Gateway Stage (dev or prod)"
  FrontendLocalDomain: { Type: String, Default: http://localhost:4200 }

Globals:
  Function:
    Timeout: 10
    MemorySize: 256

Resources:
  
  ################################################## Amplify ####################################################
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmplifyServiceRole
      Description: IAM role assumed by AWS Amplify to build and deploy apps
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
                - amplify.eu-central-1.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess-Amplify

  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: IncidentReportingAmplifyApp
      Description: Incident Reporting App
      Repository: !Ref GitRepoUrl
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      AccessToken: !Sub "{{resolve:secretsmanager:${GitHubTokenSecret}:SecretString:GithubAccessToken_}}"
      BuildSpec: |
        version: 1 
        frontend:
          phases:
            preBuild:
              commands:
                - yarn install --cache-folder .yarn-cache --prefer-offline
                - npx ng version
            build:
              commands:
                  # generate src/environments/environment.ts
                - |
                  mkdir -p src/environments
                  echo "export const environment = {" > src/environments/environment.ts
                  echo "export const environment = {" > src/environments/environment.ts
                  echo "  authUrl: '$authUrl'," >> src/environments/environment.ts
                  echo "  identityPoolId: '$identityPoolId'," >> src/environments/environment.ts
                  echo "  userPoolId: '$userPoolId'," >> src/environments/environment.ts
                  echo "  userClientPoolId: '$userClientPoolId'," >> src/environments/environment.ts
                  echo "  incidentsUrl: '$incidentsUrl'," >> src/environments/environment.ts
                  echo "};" >> src/environments/environment.ts
                - yarn run build -- --configuration=production
          artifacts:
            baseDirectory: dist/cmrp-frontend/browser
            files:
              - '**/*'
          cache:
            paths:
              - .npm/**/*
              - node_modules/**/*
        redirects:
          - source: </^[^.]+$|\\.(?!(css|gif|ico|jpg|jpeg|js|png|svg|woff|woff2|ttf|map)$)([^.]+$)/>
            target: /index.html
            status: 200

  MainBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: main
      EnableAutoBuild: true
      Stage: PRODUCTION

  DevBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId: !GetAtt AmplifyApp.AppId
      BranchName: dev
      EnableAutoBuild: true
      Stage: DEVELOPMENT

  # DynamoDB Table for storing incident reports
  
  
  ################################################## Amplify ####################################################
  IncidentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
        RecoveryPeriodInDays: 35

      AttributeDefinitions:
        - AttributeName: incidentId
          AttributeType: S
        - AttributeName: category
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: reportedBy
          AttributeType: S
        - AttributeName: region
          AttributeType: S
        - AttributeName: city
          AttributeType: S
        - AttributeName: assignedTo
          AttributeType: S
        - AttributeName: severity
          AttributeType: S
      KeySchema:
        - AttributeName: incidentId
          KeyType: HASH

      GlobalSecondaryIndexes:
        - IndexName: ByStatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: incidentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: BySeverityIndex
          KeySchema:
            - AttributeName: severity
              KeyType: HASH
            - AttributeName: incidentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ByCategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
            - AttributeName: incidentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ByReportedByIndex
          KeySchema:
            - AttributeName: reportedBy
              KeyType: HASH
            - AttributeName: incidentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ByAssignedToIndex
          KeySchema:
            - AttributeName: assignedTo
              KeyType: HASH
            - AttributeName: incidentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ByRegionIndex
          KeySchema:
            - AttributeName: region
              KeyType: HASH
            - AttributeName: incidentId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ByCityCategoryIndex
          KeySchema:
            - AttributeName: city
              KeyType: HASH
            - AttributeName: category
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: ProjectTag
          Value: !Ref ProjectTag

  UserPoolBackupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserPoolBackupTable
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: backupDate
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: backupDate
          KeyType: RANGE

      Tags:
        - Key: ProjectTag
          Value: !Ref ProjectTag
  
  
  ################################################## Cognito ####################################################

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: IncidentReportingUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        CustomMessage: !GetAtt CustomMessageFunction.Arn
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: region
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: country
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: city
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: telephone
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: IncidentReportingFrontendClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      PreventUserExistenceErrors: ENABLED
  
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: IncidentReportingIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # SES Configuration for Email Notifications
  SESConfigurationSet:
    Type: AWS::SES::ConfigurationSet
    Properties:
      Name: incident-notifications

  SESIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: noreply@monitoring-platform.com
      ConfigurationSetAttributes:
        ConfigurationSetName: !Ref SESConfigurationSet

  # SNS Topics for notifications
  IncidentReportedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "incident-reported"

  StatusUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "status-updated"

  # Lambda Functions
  EmailNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: notifications/emailNotificationHandler.handler
      Runtime: !Ref NodeRuntime
      Environment:
        Variables:
          FROM_EMAIL: noreply@monitoring-platform.com
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      Events:
        StatusUpdatedSNS:
          Type: SNS
          Properties:
            Topic: !Ref StatusUpdatedTopic

  # Cognito Groups
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref UserPool
      Precedence: 1

  CityOfficialGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: CityOfficial
      UserPoolId: !Ref UserPool
      Precedence: 2

  # IdentityPool Roles
  IdentityPoolAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IncidentReportingAuthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: authenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  IdentityPoolUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IncidentReportingUnauthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
              "ForAnyValue:StringLike":
                cognito-identity.amazonaws.com:amr: unauthenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly

  # Lambda Functions
  GetUploadUrlsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/incidents/
      Handler: getUploadUrls.handler
      Runtime: !Ref NodeRuntime
      Policies:
        - S3WritePolicy:
            BucketName: !Ref IncidentAttachmentBucket
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /upload-urls
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  CreateIncidentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/incidents/
      Handler: createIncident.handler
      Runtime: !Ref NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE: !Ref IncidentTable
          ENV: !Ref Env
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IncidentTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref IncidentReportedTopic
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt UserPool.Arn
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /incidents
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt IdentityPoolAuthRole.Arn
        unauthenticated: !GetAtt IdentityPoolUnauthRole.Arn

  AuthUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: IncidentReportingAuthUtils
      Description: Shared authorization utilities for admin-only Lambdas
      ContentUri: src/layers/
      CompatibleRuntimes:
        - !Ref PythonRuntime

  CustomMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CustomMessageFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn
  
  
  ################################################## APIs & Functions ##########################################

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStage
      Variables:
        Stage: !Ref ApiStage
      # BinaryMediaTypes:
      #   - "multipart/form-data"
      #   - "image/*"
      #   - "application/octet-stream"
      EndpointConfiguration: 
        Type: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # CORS Preflight Handler
  HandleGlobalOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HandleGlobalOptionsFunction
      Description: Handles CORS preflight requests for API Gateway
      Runtime: !Ref PythonRuntime
      CodeUri: src/utils/
      Handler: handle_global_options.handler
      Environment:
        Variables:
          STAGE: !Ref ApiStage
          AMPLIFY_LOCAL_DOMAIN: !Ref FrontendLocalDomain
          AMPLIFY_DEV_DOMAIN: !Sub 
            - 'https://${DevBranch}.${DefaultDomain}'
            - DefaultDomain: !GetAtt AmplifyApp.DefaultDomain
              DevBranch: !GetAtt DevBranch.BranchName
          AMPLIFY_PROD_DOMAIN: !Sub 
            - 'https://${MainBranch}.${DefaultDomain}'
            - DefaultDomain: !GetAtt AmplifyApp.DefaultDomain
              MainBranch: !GetAtt MainBranch.BranchName
      Events:
        OptionsProxy:
          Type: Api
          Properties:
            Path: /{proxy+}
            RestApiId: !Ref ApiGateway
            Method: OPTIONS
            Auth:
              Authorizer: NONE

  AdminInviteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AdminInviteUserFunction
      Description: Allows Admins to invite new Admins or City Officials
      Runtime: !Ref PythonRuntime
      Handler: app.lambda_handler
      CodeUri: src/admin_invite/
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Layers:
        - !Ref AuthUtilsLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt UserPool.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /invite
            RestApiId: !Ref ApiGateway
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer

  CustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoCustomMessageFunction
      Description: Customizes Cognito emails for invites and password resets
      Runtime: !Ref PythonRuntime
      Handler: app.lambda_handler
      CodeUri: src/custom_message/
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"

  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListUserStatsFunction
      Description: Lists user counts by group and returns all users
      Runtime: !Ref PythonRuntime
      Handler: app.lambda_handler
      CodeUri: src/list_users/
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Layers:
        - !Ref AuthUtilsLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
                - cognito-idp:ListUsersInGroup
                - cognito-idp:AdminListGroupsForUser
              Resource: !GetAtt UserPool.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users
            RestApiId: !Ref ApiGateway
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteUserFunction
      Description: Deletes a user from the Cognito User Pool
      Runtime: !Ref PythonRuntime
      Handler: app.lambda_handler
      CodeUri: src/delete/
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
      Layers:
        - !Ref AuthUtilsLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminDeleteUser
                - cognito-idp:ListUsers
              Resource: !GetAtt UserPool.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users
            RestApiId: !Ref ApiGateway
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer


  GetMyIncidentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/incidents/
      Handler: getMyIncidents.handler
      Runtime: !Ref NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE: !Ref IncidentTable
          ENV: !Ref Env
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref IncidentTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /incidents/mine
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer

  ListIncidentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/incidents/
      Handler: listIncidents.handler
      Runtime: !Ref NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE: !Ref IncidentTable
          ENV: !Ref Env
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref IncidentTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /incidents
            Method: GET
            Auth:
              Authorizer: NONE

  UpdateIncidentStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/incidents/
      Handler: updateIncidentStatus.handler
      Runtime: !Ref NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE: !Ref IncidentTable
          ENV: !Ref Env
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IncidentTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref StatusUpdatedTopic
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /incidents/{id}/status
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
  
  SubmitFeedbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/feedback/
      Handler: submitFeedback.handler
      Runtime: !Ref NodeRuntime
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IncidentTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /feedback
            Method: POST
            Auth:
              Authorizer: NONE
  
  NotifyOfficialFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/notifications/
      Handler: notifyOfficial.handler
      Runtime: !Ref NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE: !Ref IncidentTable
          INCIDENT_REPORTED_TOPIC: !Ref IncidentReportedTopic
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref IncidentReportedTopic
        - DynamoDBReadPolicy:
            TableName: !Ref IncidentTable
      Events:
        IncidentReportedEvent:
          Type: SNS
          Properties:
            Topic: !Ref IncidentReportedTopic
  
  NotifyReporterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/notifications/
      Handler: notifyReporter.handler
      Runtime: !Ref NodeRuntime
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref StatusUpdatedTopic
      Events:
        StatusUpdatedEvent:
          Type: SNS
          Properties:
            Topic: !Ref StatusUpdatedTopic

  GetPublicDashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dashboard/
      Handler: getPublicDashboard.handler
      Runtime: !Ref NodeRuntime
      Environment:
        Variables:
          QUICKSIGHT_DASHBOARD_ID: "9824a03f-fef9-4507-b432-bdd619b87d96"
          AMPLIFY_LOCAL_DOMAIN: !Ref FrontendLocalDomain
          AMPLIFY_DEV_DOMAIN: !Sub 
            - 'https://${DevBranch}.${DefaultDomain}'
            - DefaultDomain: !GetAtt AmplifyApp.DefaultDomain
              DevBranch: !GetAtt DevBranch.BranchName
          AMPLIFY_PROD_DOMAIN: !Sub 
            - 'https://${MainBranch}.${DefaultDomain}'
            - DefaultDomain: !GetAtt AmplifyApp.DefaultDomain
              MainBranch: !GetAtt MainBranch.BranchName
          AWS_ACCOUNT_ID: !Sub ${AWS::AccountId}
          REGION: "eu-west-1"
          INCIDENT_TABLE: !Ref IncidentTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - quicksight:GetDashboardEmbedUrl
                - quicksight:GenerateEmbedUrlForAnonymousUser
              Resource:
                - !Sub "arn:aws:quicksight:eu-west-1:605134436600:dashboard/9824a03f-fef9-4507-b432-bdd619b87d96"
        - DynamoDBReadPolicy:
            TableName: !Ref IncidentTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /dashboard
            RestApiId: !Ref ApiGateway
            Method: GET
            Auth:
              Authorizer: NONE

  IncidentAttachmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "incident-attachments-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # SNS Topics



  ################################################## Cognito Backup & Restore #####################################
  CognitoBackupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub cognito-user-backups-${AWS::AccountId}-${AWS::Region}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "username"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "username"
          KeyType: "HASH"
      SSESpecification:
        SSEEnabled: true


  CognitoBackupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoBackupFunction
      Description: Exports Cognito users daily to DynamoDB
      Runtime: !Ref PythonRuntime
      Handler: app.lambda_handler
      CodeUri: src/backup/
      Timeout: 900
      MemorySize: 256
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          BACKUP_TABLE: !Ref CognitoBackupTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:BatchWriteItem
              Resource: !GetAtt CognitoBackupTable.Arn
            - Effect: Allow
              Action:
                - cognito-idp:AdminListGroupsForUser
              Resource: !GetAtt UserPool.Arn


  BackupSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 hour)
      Targets:
        - Arn: !GetAtt CognitoBackupFunction.Arn
          Id: BackupTarget

  BackupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoBackupFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BackupSchedule.Arn

  CognitoRestoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoRestoreFunction
      Description: Restores Cognito users from DynamoDB backup
      Runtime: !Ref PythonRuntime
      Handler: app.lambda_handler
      CodeUri: src/restore/
      Timeout: 900
      MemorySize: 256
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          BACKUP_TABLE: !Ref CognitoBackupTable
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminAddUserToGroup
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:GetItem
              Resource: !GetAtt CognitoBackupTable.Arn

################################################## Cognito Health Check #####################################
  CognitoHealthAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "Cognito User Pool Health Alerts"
      TopicName: !Sub "${AWS::StackName}-cognito-health-alerts"

  CognitoHealthAlertSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref CognitoHealthAlertTopic
      Protocol: email
      Endpoint: "ehanson787@gmail.com" 

  CognitoHealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoHealthCheckFunction
      Description: Scheduled health check for Cognito User Pool
      Runtime: !Ref PythonRuntime
      Handler: app.lambda_handler
      CodeUri: src/health_check/
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          ALERT_TOPIC_ARN: !Ref CognitoHealthAlertTopic
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:DescribeUserPool
              Resource: !GetAtt UserPool.Arn
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref CognitoHealthAlertTopic

  CognitoHealthCheckSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(30 minutes)   
      State: ENABLED
      Targets:
        - Arn: !GetAtt CognitoHealthCheckFunction.Arn
          Id: "CognitoHealthCheckTarget"

  CognitoHealthCheckPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CognitoHealthCheckFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CognitoHealthCheckSchedule.Arn


Outputs:
  
  IncidentTableName:
    Description: The name of the DynamoDB table for incident reports
    Value: !Ref IncidentTable
  UserPoolBackupTableName:
    Description: The name of the DynamoDB table for incident reports
    Value: !Ref UserPoolBackupTable

  AmplifyAppId:
    Description: The ID of the deployed Amplify application
    Value: !GetAtt AmplifyApp.AppId
  AmplifyAppName:
    Description: The name of the deployed Amplify application
    Value: !GetAtt AmplifyApp.AppName
  AmplifyDomain:
    Description: The domain of the deployed Amplify application
    Value: !Sub
      - 'https://main.${DefaultDomain}'
      - DefaultDomain: !GetAtt AmplifyApp.DefaultDomain

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool

  ApiGatewayUrl:
    Description: Base URL for API Gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}"