AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Monitoring & Reporting Platform Backend (MSc Real Estate Capstone)

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    MemorySize: 256
    CodeUri: ./src
    Environment:
      Variables:
        INCIDENT_TABLE: !Ref IncidentTable
        FEEDBACK_TABLE: !Ref FeedbackTable
        ATTACHMENT_BUCKET: !Ref IncidentAttachmentBucket
        DASHBOARD_BUCKET: !Ref DashboardDataBucket
        INCIDENT_REPORTED_TOPIC: !Ref IncidentReportedTopic
        STATUS_UPDATED_TOPIC: !Ref StatusUpdatedTopic
        STATUS_WORKFLOW_ARN: !Ref IncidentStatusWorkflow
        FROM_EMAIL: noreply@monitoring-platform.com

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: MonitoringUserPool
      AutoVerifiedAttributes: [email]
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - Name: email
          Required: true
          Mutable: true
      UsernameAttributes:
        - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: MonitoringUserPoolClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
  UserPoolGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://sam-artifacts-dev-kesse.s3.eu-west-1.amazonaws.com/cognito-user-pool-groups.yaml
      Parameters:
        UserPoolId: !Ref UserPool
        Groups: "citizen,cityAuth,admin"

  # DynamoDB Tables
  IncidentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: IncidentTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: FeedbackTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # S3 Buckets
  IncidentAttachmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "incident-attachments-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        
  DashboardDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "dashboard-data-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketPolicy:
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: quicksight.amazonaws.com
              Action: s3:GetObject
              Resource: !Sub "arn:aws:s3:::dashboard-data-${AWS::AccountId}/*"

  # SNS Topics
  IncidentReportedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: incident-reported
  StatusUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: status-updated

  # Step Functions State Machine
  IncidentStatusWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: IncidentStatusWorkflow
      DefinitionString: !Sub |
        {
          "Comment": "Incident Status Update Workflow with Notifications",
          "StartAt": "UpdateIncidentStatus",
          "States": {
            "UpdateIncidentStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:updateItem",
              "Parameters": {
                "TableName": "${IncidentTable}",
                "Key": {
                  "id": {
                    "S.$": "$.incidentId"
                  }
                },
                "UpdateExpression": "SET #status = :status, updatedAt = :updatedAt, updatedBy = :updatedBy",
                "ExpressionAttributeNames": {
                  "#status": "status"
                },
                "ExpressionAttributeValues": {
                  ":status": {
                    "S.$": "$.newStatus"
                  },
                  ":updatedAt": {
                    "S.$": "$.timestamp"
                  },
                  ":updatedBy": {
                    "S.$": "$.updatedBy"
                  }
                }
              },
              "Next": "GetIncidentDetails"
            },
            "GetIncidentDetails": {
              "Type": "Task",
              "Resource": "arn:aws:states:::dynamodb:getItem",
              "Parameters": {
                "TableName": "${IncidentTable}",
                "Key": {
                  "id": {
                    "S.$": "$.incidentId"
                  }
                }
              },
              "Next": "NotifyReporter",
              "ResultPath": "$.incidentDetails"
            },
            "NotifyReporter": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${StatusUpdatedTopic}",
                "Message.$": "States.Format('Your incident {} status has been updated to: {}', $.incidentId, $.newStatus)",
                "Subject.$": "States.Format('Incident Status Updated: {}', $.newStatus)",
                "MessageAttributes": {
                  "incidentId": {
                    "DataType": "String",
                    "StringValue.$": "$.incidentId"
                  },
                  "newStatus": {
                    "DataType": "String",
                    "StringValue.$": "$.newStatus"
                  },
                  "userEmail": {
                    "DataType": "String",
                    "StringValue.$": "$.incidentDetails.Item.userEmail.S"
                  }
                }
              },
              "Next": "CheckIfClosed"
            },
            "CheckIfClosed": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.newStatus",
                  "StringEquals": "CLOSED",
                  "Next": "SendClosureNotification"
                }
              ],
              "Default": "Success"
            },
            "SendClosureNotification": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "TopicArn": "${StatusUpdatedTopic}",
                "Message": "Your incident has been resolved and closed. Thank you for your report.",
                "Subject": "Incident Closed - Resolution Complete",
                "MessageAttributes": {
                  "incidentId": {
                    "DataType": "String",
                    "StringValue.$": "$.incidentId"
                  },
                  "userEmail": {
                    "DataType": "String",
                    "StringValue.$": "$.incidentDetails.Item.userEmail.S"
                  },
                  "notificationType": {
                    "DataType": "String",
                    "StringValue": "CLOSURE"
                  }
                }
              },
              "Next": "Success"
            },
            "Success": {
              "Type": "Succeed"
            }
          }
        }
      RoleArn: !GetAtt StepFunctionsRole.Arn

  # IAM Role for Step Functions
  StepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: !GetAtt IncidentTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref StatusUpdatedTopic

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      BinaryMediaTypes:
        - "multipart/form-data"
        - "image/*"
        - "application/octet-stream"
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key'"
        AllowOrigin: "'*'"
        AllowCredentials: false
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  # Lambda Functions
  GetUploadUrlsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: incidents/getUploadUrls.handler
      Policies:
        - S3WritePolicy:
            BucketName: !Ref IncidentAttachmentBucket
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /upload-urls
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
  CreateIncidentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: incidents/createIncident.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IncidentTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref IncidentReportedTopic
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource: !GetAtt UserPool.Arn
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /incidents
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
  GetMyIncidentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: incidents/getMyIncidents.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref IncidentTable
        - S3ReadPolicy:
            BucketName: !Ref IncidentAttachmentBucket
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /incidents/mine
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
  ListIncidentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: incidents/listIncidents.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref IncidentTable
        - S3ReadPolicy:
            BucketName: !Ref IncidentAttachmentBucket
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /incidents
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
  UpdateIncidentStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: incidents/updateIncidentStatus.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref IncidentTable
        - SNSPublishMessagePolicy:
            TopicName: !Ref StatusUpdatedTopic
        - Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: !Ref IncidentStatusWorkflow
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /incidents/{id}/status
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
  SubmitFeedbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: feedback/submitFeedback.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /feedback
            Method: post
            Auth:
              Authorizer: NONE
  NotifyOfficialFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notifications/notifyOfficial.handler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref IncidentReportedTopic
  NotifyReporterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notifications/notifyReporter.handler
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Ref StatusUpdatedTopic
            
  EmailNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notifications/emailNotificationHandler.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
      Events:
        StatusUpdatedSNS:
          Type: SNS
          Properties:
            Topic: !Ref StatusUpdatedTopic
            
  ExportDashboardDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dashboard/exportDashboardData.handler
      Timeout: 60
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref IncidentTable
        - S3WritePolicy:
            BucketName: !Ref DashboardDataBucket
      Events:
        ScheduledExport:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Enabled: true

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref UserPoolClient
  IncidentTableName:
    Description: "Incident DynamoDB Table Name"
    Value: !Ref IncidentTable
  FeedbackTableName:
    Description: "Feedback DynamoDB Table Name"
    Value: !Ref FeedbackTable
  AttachmentBucketName:
    Description: "Incident Attachment S3 Bucket Name"
    Value: !Ref IncidentAttachmentBucket
  IncidentReportedTopicArn:
    Description: "Incident Reported SNS Topic ARN"
    Value: !Ref IncidentReportedTopic
  StatusUpdatedTopicArn:
    Description: "Status Updated SNS Topic ARN"
    Value: !Ref StatusUpdatedTopic
  DashboardDataBucketName:
    Description: "Dashboard Data S3 Bucket Name for QuickSight"
    Value: !Ref DashboardDataBucket
