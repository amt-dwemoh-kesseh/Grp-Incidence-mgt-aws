AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Incident Reporting App - Auth & Authorization Infrastructure
Parameters:
  ProjectTag:
    Type: String
    Default: incident-app
  GitRepoUrl:
    Type: String
    Default: https://github.com/drex7/cmrp-frontend.git
  GitHubTokenSecret:
    Type: String
    Default: cmrp-frontend/token
  Env:
    Type: String
    Default: dev
  PythonRuntime:
    Type: String
    Default: python3.12
  NodeRuntime:
    Type: String
    Default: nodejs22.x
  ApiStage:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - prod
    Description: API Gateway Stage (dev or prod)
Globals:
  Function:
    Timeout: 10
    MemorySize: 256
Resources:
  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmplifyServiceRole
      Description: IAM role assumed by AWS Amplify to build and deploy apps
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - amplify.amazonaws.com
            - amplify.eu-central-1.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess-Amplify
    Metadata:
      SamResourceId: AmplifyRole
  AmplifyApp:
    Type: AWS::Amplify::App
    Properties:
      Name: IncidentReportingAmplifyApp
      Description: Incident Reporting App
      Repository:
        Ref: GitRepoUrl
      IAMServiceRole:
        Fn::GetAtt:
        - AmplifyRole
        - Arn
      AccessToken:
        Fn::Sub: '{{resolve:secretsmanager:${GitHubTokenSecret}:SecretString:GithubAccessToken_}}'
      BuildSpec: "version: 1 \nfrontend:\n  phases:\n    preBuild:\n      commands:\n\
        \        - yarn install --cache-folder .yarn-cache --prefer-offline\n    \
        \    - npx ng version\n    build:\n      commands:\n          # generate src/environments/environment.ts\n\
        \        - |\n          mkdir -p src/environments\n          echo \"export\
        \ const environment = {\" > src/environments/environment.ts\n          echo\
        \ \"export const environment = {\" > src/environments/environment.ts\n   \
        \       echo \"  authUrl: '$authUrl',\" >> src/environments/environment.ts\n\
        \          echo \"  identityPoolId: '$identityPoolId',\" >> src/environments/environment.ts\n\
        \          echo \"  userPoolId: '$userPoolId',\" >> src/environments/environment.ts\n\
        \          echo \"  userClientPoolId: '$userClientPoolId',\" >> src/environments/environment.ts\n\
        \          echo \"  incidentsUrl: '$incidentsUrl',\" >> src/environments/environment.ts\n\
        \          echo \"};\" >> src/environments/environment.ts\n        - yarn\
        \ run build -- --configuration=production\n  artifacts:\n    baseDirectory:\
        \ dist/cmrp-frontend/browser\n    files:\n      - '**/*'\n  cache:\n    paths:\n\
        \      - .npm/**/*\n      - node_modules/**/*\nredirects:\n  - source: </^[^.]+$|\\\
        \\.(?!(css|gif|ico|jpg|jpeg|js|png|svg|woff|woff2|ttf|map)$)([^.]+$)/>\n \
        \   target: /index.html\n    status: 200\n"
    Metadata:
      SamResourceId: AmplifyApp
  MainBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId:
        Fn::GetAtt:
        - AmplifyApp
        - AppId
      BranchName: main
      EnableAutoBuild: true
      Stage: PRODUCTION
    Metadata:
      SamResourceId: MainBranch
  DevBranch:
    Type: AWS::Amplify::Branch
    Properties:
      AppId:
        Fn::GetAtt:
        - AmplifyApp
        - AppId
      BranchName: dev
      EnableAutoBuild: true
      Stage: DEVELOPMENT
    Metadata:
      SamResourceId: DevBranch
  IncidentTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
        RecoveryPeriodInDays: 35
      AttributeDefinitions:
      - AttributeName: incidentId
        AttributeType: S
      - AttributeName: category
        AttributeType: S
      - AttributeName: status
        AttributeType: S
      - AttributeName: reportedBy
        AttributeType: S
      - AttributeName: region
        AttributeType: S
      - AttributeName: city
        AttributeType: S
      - AttributeName: assignedTo
        AttributeType: S
      - AttributeName: severity
        AttributeType: S
      KeySchema:
      - AttributeName: incidentId
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: ByStatusIndex
        KeySchema:
        - AttributeName: status
          KeyType: HASH
        - AttributeName: incidentId
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: BySeverityIndex
        KeySchema:
        - AttributeName: severity
          KeyType: HASH
        - AttributeName: incidentId
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: ByCategoryIndex
        KeySchema:
        - AttributeName: category
          KeyType: HASH
        - AttributeName: incidentId
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: ByReportedByIndex
        KeySchema:
        - AttributeName: reportedBy
          KeyType: HASH
        - AttributeName: incidentId
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: ByAssignedToIndex
        KeySchema:
        - AttributeName: assignedTo
          KeyType: HASH
        - AttributeName: incidentId
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: ByRegionIndex
        KeySchema:
        - AttributeName: region
          KeyType: HASH
        - AttributeName: incidentId
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      - IndexName: ByCityCategoryIndex
        KeySchema:
        - AttributeName: city
          KeyType: HASH
        - AttributeName: category
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
      Tags:
      - Key: ProjectTag
        Value:
          Ref: ProjectTag
    Metadata:
      SamResourceId: IncidentTable
  UserPoolBackupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserPoolBackupTable
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      - AttributeName: backupDate
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      - AttributeName: backupDate
        KeyType: RANGE
      Tags:
      - Key: ProjectTag
        Value:
          Ref: ProjectTag
    Metadata:
      SamResourceId: UserPoolBackupTable
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: IncidentReportingUserPool
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      LambdaConfig:
        CustomMessage:
          Fn::GetAtt:
          - CustomMessageFunction
          - Arn
      Schema:
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: region
        AttributeDataType: String
        Mutable: true
        Required: false
      - Name: country
        AttributeDataType: String
        Mutable: true
        Required: false
      - Name: city
        AttributeDataType: String
        Mutable: true
        Required: false
      - Name: telephone
        AttributeDataType: String
        Mutable: true
        Required: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: false
    Metadata:
      SamResourceId: UserPool
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: IncidentReportingFrontendClient
      UserPoolId:
        Ref: UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
      - COGNITO
      PreventUserExistenceErrors: ENABLED
    Metadata:
      SamResourceId: UserPoolClient
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: IncidentReportingIdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
          - UserPool
          - ProviderName
    Metadata:
      SamResourceId: IdentityPool
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId:
        Ref: UserPool
      Precedence: 1
    Metadata:
      SamResourceId: AdminGroup
  CityOfficialGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: CityOfficial
      UserPoolId:
        Ref: UserPool
      Precedence: 2
    Metadata:
      SamResourceId: CityOfficialGroup
  IdentityPoolAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IncidentReportingAuthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      SamResourceId: IdentityPoolAuthRole
  IdentityPoolUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IncidentReportingUnauthRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Deny
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
    Metadata:
      SamResourceId: IdentityPoolUnauthRole
  GetUploadUrlsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/3835d380a6e7f172f0db4c5fe1d4a6c7
      Handler: getUploadUrls.handler
      Runtime:
        Ref: NodeRuntime
      Policies:
      - S3WritePolicy:
          BucketName:
            Ref: IncidentAttachmentBucket
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /upload-urls
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: GetUploadUrlsFunction
  CreateIncidentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/3835d380a6e7f172f0db4c5fe1d4a6c7
      Handler: createIncident.handler
      Runtime:
        Ref: NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE:
            Ref: IncidentTable
          ENV:
            Ref: Env
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IncidentTable
      - SNSPublishMessagePolicy:
          TopicName:
            Ref: IncidentReportedTopic
      - Statement:
        - Effect: Allow
          Action:
          - cognito-idp:ListUsers
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /incidents
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
<<<<<<< HEAD
=======
        OptionsEvent:
          Type: Api
          Properties:
            Path: /incidents
            Method: OPTIONS
            Auth:
              Authorizer: CognitoAuthorizer
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
    Metadata:
      SamResourceId: CreateIncidentFunction
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - IdentityPoolAuthRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - IdentityPoolUnauthRole
          - Arn
    Metadata:
      SamResourceId: IdentityPoolRoleAttachment
  AuthUtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: IncidentReportingAuthUtils
      Description: Shared authorization utilities for admin-only Lambdas
      ContentUri: s3://sam-artifacts-dev-kesse/38f3d1a418ec693953d566a3a61edfb8
      CompatibleRuntimes:
      - Ref: PythonRuntime
    Metadata:
      SamResourceId: AuthUtilsLayer
  CustomMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CustomMessageFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - UserPool
        - Arn
    Metadata:
      SamResourceId: CustomMessagePermission
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName:
        Ref: ApiStage
      Variables:
        Stage:
          Ref: ApiStage
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - UserPool
              - Arn
    Metadata:
      SamResourceId: ApiGateway
  HandleGlobalOptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HandleGlobalOptionsFunction
      Description: Handles CORS preflight requests for API Gateway
      Runtime:
        Ref: PythonRuntime
<<<<<<< HEAD
      CodeUri: s3://sam-artifacts-dev-kesse/1ec68bc7fcdcc4206b123997ec18be1b
=======
      CodeUri: s3://sam-artifacts-dev-kesse/bd4a2c022a060bd9ded51cdf644f7442
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Handler: handle_global_options.handler
      Environment:
        Variables:
          STAGE:
            Ref: ApiStage
<<<<<<< HEAD
          AMPLIFY_DEV_DOMAIN:
            Fn::Sub:
            - https://${DevBranch}.${DefaultDomain}
=======
          AMPLIFY_DOMAIN:
            Fn::Sub:
            - https://main.${DefaultDomain}
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
            - DefaultDomain:
                Fn::GetAtt:
                - AmplifyApp
                - DefaultDomain
<<<<<<< HEAD
              DevBranch:
                Fn::GetAtt:
                - DevBranch
                - BranchName
          AMPLIFY_PROD_DOMAIN:
            Fn::Sub:
            - https://${MainBranch}.${DefaultDomain}
            - DefaultDomain:
                Fn::GetAtt:
                - AmplifyApp
                - DefaultDomain
              MainBranch:
                Fn::GetAtt:
                - MainBranch
                - BranchName
=======
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Events:
        OptionsProxy:
          Type: Api
          Properties:
            Path: /{proxy+}
            RestApiId:
              Ref: ApiGateway
            Method: OPTIONS
            Auth:
              Authorizer: NONE
    Metadata:
      SamResourceId: HandleGlobalOptionsFunction
  AdminInviteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: AdminInviteUserFunction
      Description: Allows Admins to invite new Admins or City Officials
      Runtime:
        Ref: PythonRuntime
      Handler: app.lambda_handler
      CodeUri: s3://sam-artifacts-dev-kesse/4bbde153c428f698c535e854afcedbe2
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
      Layers:
      - Ref: AuthUtilsLayer
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminAddUserToGroup
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /invite
            RestApiId:
              Ref: ApiGateway
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: AdminInviteFunction
  CustomMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoCustomMessageFunction
      Description: Customizes Cognito emails for invites and password resets
      Runtime:
        Ref: PythonRuntime
      Handler: app.lambda_handler
<<<<<<< HEAD
      CodeUri: s3://sam-artifacts-dev-kesse/0c380061ba37930310c1fc01733e558a
=======
      CodeUri: s3://sam-artifacts-dev-kesse/11ecad1df7b84d0c8226909ce5268d5d
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
    Metadata:
      SamResourceId: CustomMessageFunction
  ListUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ListUserStatsFunction
      Description: Lists user counts by group and returns all users
      Runtime:
        Ref: PythonRuntime
      Handler: app.lambda_handler
<<<<<<< HEAD
      CodeUri: s3://sam-artifacts-dev-kesse/b9bbc449b064998bd12993d2f5df3f35
=======
      CodeUri: s3://sam-artifacts-dev-kesse/3797d764a58d08f3e339920ef3e7ea84
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
      Layers:
      - Ref: AuthUtilsLayer
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:ListUsers
          - cognito-idp:ListUsersInGroup
          - cognito-idp:AdminListGroupsForUser
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /users
            RestApiId:
              Ref: ApiGateway
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: ListUsersFunction
  GetMyIncidentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/3835d380a6e7f172f0db4c5fe1d4a6c7
      Handler: getMyIncidents.handler
      Runtime:
        Ref: NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE:
            Ref: IncidentTable
          ENV:
            Ref: Env
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: IncidentTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /incidents/mine
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
<<<<<<< HEAD
=======
        OptionsEvent:
          Type: Api
          Properties:
            Path: /incidents/mine
            Method: OPTIONS
            Auth:
              Authorizer: NONE
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
    Metadata:
      SamResourceId: GetMyIncidentsFunction
  ListIncidentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/3835d380a6e7f172f0db4c5fe1d4a6c7
      Handler: listIncidents.handler
      Runtime:
        Ref: NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE:
            Ref: IncidentTable
          ENV:
            Ref: Env
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: IncidentTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /incidents
            Method: GET
            Auth:
              Authorizer: NONE
<<<<<<< HEAD
=======
        OptionsEvent:
          Type: Api
          Properties:
            Path: /incidents
            Method: OPTIONS
            Auth:
              Authorizer: NONE
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
    Metadata:
      SamResourceId: ListIncidentsFunction
  UpdateIncidentStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/3835d380a6e7f172f0db4c5fe1d4a6c7
      Handler: updateIncidentStatus.handler
      Runtime:
        Ref: NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE:
            Ref: IncidentTable
          ENV:
            Ref: Env
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IncidentTable
      - SNSPublishMessagePolicy:
          TopicName:
            Ref: StatusUpdatedTopic
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /incidents/{id}/status
            Method: PUT
            Auth:
              Authorizer: NONE
<<<<<<< HEAD
=======
        OptionsEvent:
          Type: Api
          Properties:
            Path: /incidents/{id}/status
            Method: OPTIONS
            Auth:
              Authorizer: NONE
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
    Metadata:
      SamResourceId: UpdateIncidentStatusFunction
  SubmitFeedbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/dc3d39b8429074420bbba3d807112d96
      Handler: submitFeedback.handler
      Runtime:
        Ref: NodeRuntime
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: IncidentTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /feedback
            Method: POST
            Auth:
              Authorizer: NONE
    Metadata:
      SamResourceId: SubmitFeedbackFunction
  NotifyOfficialFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/f339e72f91b4fdaedc382f5a2e64bdc5
      Handler: notifyOfficial.handler
      Runtime:
        Ref: NodeRuntime
      Environment:
        Variables:
          INCIDENT_TABLE:
            Ref: IncidentTable
          INCIDENT_REPORTED_TOPIC:
            Ref: IncidentReportedTopic
      Policies:
      - SNSPublishMessagePolicy:
          TopicName:
            Ref: IncidentReportedTopic
      - DynamoDBReadPolicy:
          TableName:
            Ref: IncidentTable
      Events:
        IncidentReportedEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: IncidentReportedTopic
    Metadata:
      SamResourceId: NotifyOfficialFunction
  NotifyReporterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/f339e72f91b4fdaedc382f5a2e64bdc5
      Handler: notifyReporter.handler
      Runtime:
        Ref: NodeRuntime
      Policies:
      - SNSPublishMessagePolicy:
          TopicName:
            Ref: StatusUpdatedTopic
      Events:
        StatusUpdatedEvent:
          Type: SNS
          Properties:
            Topic:
              Ref: StatusUpdatedTopic
    Metadata:
      SamResourceId: NotifyReporterFunction
  GetPublicDashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://sam-artifacts-dev-kesse/4c9bc01877abc209c794b81b451d64b5
      Handler: getPublicDashboard.handler
      Runtime:
        Ref: NodeRuntime
      Environment:
        Variables:
          QUICKSIGHT_DASHBOARD_ID: 9824a03f-fef9-4507-b432-bdd619b87d96
          AWS_ACCOUNT_ID: GroupOne
          REGION: eu-west-1
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - quicksight:GetDashboardEmbedUrl
          - quicksight:GenerateEmbedUrlForAnonymousUser
          Resource:
          - Fn::Sub: arn:aws:quicksight:eu-west-1:605134436600:dashboard/9824a03f-fef9-4507-b432-bdd619b87d96
      Events:
        Api:
          Type: Api
          Properties:
            Path: /dashboard
            RestApiId:
              Ref: ApiGateway
            Method: GET
            Auth:
              Authorizer: NONE
    Metadata:
      SamResourceId: GetPublicDashboardFunction
  IncidentAttachmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: incident-attachments-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    Metadata:
      SamResourceId: IncidentAttachmentBucket
  IncidentReportedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: incident-reported
    Metadata:
      SamResourceId: IncidentReportedTopic
  StatusUpdatedTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: status-updated
    Metadata:
      SamResourceId: StatusUpdatedTopic
<<<<<<< HEAD
  CognitoBackupTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: cognito-user-backups-${AWS::AccountId}-${AWS::Region}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: username
        AttributeType: S
      KeySchema:
      - AttributeName: username
        KeyType: HASH
      SSESpecification:
        SSEEnabled: true
    Metadata:
      SamResourceId: CognitoBackupTable
=======
  BackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: cognito-user-backups-${AWS::AccountId}-${AWS::Region}
    Metadata:
      SamResourceId: BackupBucket
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
  CognitoBackupFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoBackupFunction
<<<<<<< HEAD
      Description: Exports Cognito users daily to DynamoDB
      Runtime:
        Ref: PythonRuntime
      Handler: app.lambda_handler
      CodeUri: s3://sam-artifacts-dev-kesse/4ba141906712be10994975f57cad3909
=======
      Description: Exports Cognito users daily to S3
      CodeUri: s3://sam-artifacts-dev-kesse/b1e33bcebba47aebcfb97dc0e795bc7d
      Handler: app.lambda_handler
      Runtime: python3.12
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Timeout: 900
      MemorySize: 256
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
<<<<<<< HEAD
          BACKUP_TABLE:
            Ref: CognitoBackupTable
=======
          BUCKET:
            Ref: BackupBucket
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:ListUsers
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
        - Effect: Allow
          Action:
<<<<<<< HEAD
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
          Resource:
            Fn::GetAtt:
            - CognitoBackupTable
            - Arn
=======
          - s3:PutObject
          Resource:
            Fn::Sub: arn:aws:s3:::${BackupBucket}/*
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
    Metadata:
      SamResourceId: CognitoBackupFunction
  BackupSchedule:
    Type: AWS::Events::Rule
    Properties:
<<<<<<< HEAD
      ScheduleExpression: rate(1 hour)
=======
      ScheduleExpression: rate(1 day)
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Targets:
      - Arn:
          Fn::GetAtt:
          - CognitoBackupFunction
          - Arn
        Id: BackupTarget
    Metadata:
      SamResourceId: BackupSchedule
  BackupPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: CognitoBackupFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - BackupSchedule
        - Arn
    Metadata:
      SamResourceId: BackupPermission
  CognitoRestoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoRestoreFunction
<<<<<<< HEAD
      Description: Restores Cognito users from DynamoDB backup
      Runtime:
        Ref: PythonRuntime
      Handler: app.lambda_handler
      CodeUri: s3://sam-artifacts-dev-kesse/172554d50753aba7fd4cf67abcb3ded0
=======
      Description: Restores Cognito users from S3 backup
      CodeUri: s3://sam-artifacts-dev-kesse/2a7c4efb38500a060a6c891ecdfd7258
      Handler: app.lambda_handler
      Runtime: python3.12
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Timeout: 900
      MemorySize: 256
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
<<<<<<< HEAD
          BACKUP_TABLE:
            Ref: CognitoBackupTable
=======
          BUCKET:
            Ref: BackupBucket
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminAddUserToGroup
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
        - Effect: Allow
          Action:
<<<<<<< HEAD
          - dynamodb:Scan
          - dynamodb:GetItem
          Resource:
            Fn::GetAtt:
            - CognitoBackupTable
            - Arn
=======
          - s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${BackupBucket}/*
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
    Metadata:
      SamResourceId: CognitoRestoreFunction
  CognitoHealthAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Cognito User Pool Health Alerts
      TopicName:
        Fn::Sub: ${AWS::StackName}-cognito-health-alerts
    Metadata:
      SamResourceId: CognitoHealthAlertTopic
  CognitoHealthAlertSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:
        Ref: CognitoHealthAlertTopic
      Protocol: email
      Endpoint: ehanson787@gmail.com
    Metadata:
      SamResourceId: CognitoHealthAlertSubscription
  CognitoHealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CognitoHealthCheckFunction
      Description: Scheduled health check for Cognito User Pool
<<<<<<< HEAD
      Runtime:
        Ref: PythonRuntime
      Handler: app.lambda_handler
      CodeUri: s3://sam-artifacts-dev-kesse/6dba81f65636a6c9f73f310bdd368dcc
=======
      CodeUri: s3://sam-artifacts-dev-kesse/6dba81f65636a6c9f73f310bdd368dcc
      Handler: app.lambda_handler
      Runtime: python3.12
>>>>>>> 51a8b33d330ee85e2371455bb2fec4741b427488
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: UserPool
          ALERT_TOPIC_ARN:
            Ref: CognitoHealthAlertTopic
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:DescribeUserPool
          Resource:
            Fn::GetAtt:
            - UserPool
            - Arn
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: CognitoHealthAlertTopic
    Metadata:
      SamResourceId: CognitoHealthCheckFunction
  CognitoHealthCheckSchedule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(30 minutes)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - CognitoHealthCheckFunction
          - Arn
        Id: CognitoHealthCheckTarget
    Metadata:
      SamResourceId: CognitoHealthCheckSchedule
  CognitoHealthCheckPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CognitoHealthCheckFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - CognitoHealthCheckSchedule
        - Arn
    Metadata:
      SamResourceId: CognitoHealthCheckPermission
Outputs:
  IncidentTableName:
    Description: The name of the DynamoDB table for incident reports
    Value:
      Ref: IncidentTable
  UserPoolBackupTableName:
    Description: The name of the DynamoDB table for incident reports
    Value:
      Ref: UserPoolBackupTable
  AmplifyAppId:
    Description: The ID of the deployed Amplify application
    Value:
      Fn::GetAtt:
      - AmplifyApp
      - AppId
  AmplifyAppName:
    Description: The name of the deployed Amplify application
    Value:
      Fn::GetAtt:
      - AmplifyApp
      - AppName
  AmplifyDomain:
    Description: The domain of the deployed Amplify application
    Value:
      Fn::Sub:
      - https://main.${DefaultDomain}
      - DefaultDomain:
          Fn::GetAtt:
          - AmplifyApp
          - DefaultDomain
  UserPoolId:
    Description: Cognito User Pool ID
    Value:
      Ref: UserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value:
      Ref: UserPoolClient
  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value:
      Ref: IdentityPool
  ApiGatewayUrl:
    Description: Base URL for API Gateway
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${ApiStage}
